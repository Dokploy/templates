[variables]
main_domain = "${domain}"
db_name = "wordpress_franken"
db_password = "${password:32}"
cache_purge_key = "${password:16}"
wp_admin_user = "admin"
wp_admin_password = "${password:12}"
wp_admin_email = "admin@${domain}"

[[config.domains]]
serviceName = "wordpress"
port = 80
host = "${main_domain}"

[config]
env = [
  '############',
  '# WordPress FrankenPHP Configuration',
  '# High-Performance WordPress with Lightning-fast Cache',
  '# Auto-generated variables - Ready for production',
  '############',
  '',
  '############',
  '# Database Configuration',
  '############',
  'DB_NAME=${db_name}',
  'DB_USER=wordpress',
  'DB_PASSWORD=${db_password}',
  'DB_HOST=wp_db',
  'DB_TABLE_PREFIX=wp_',
  '',
  '############',
  '# WordPress Configuration',  
  '############',
  'WP_DEBUG=false',
  'FORCE_HTTPS=false',
  'WORDPRESS_CONFIG_EXTRA=define("WP_HOME", "http://${main_domain}"); define("WP_SITEURL", "http://${main_domain}"); define("WP_CACHE", true); define("AUTOMATIC_UPDATER_DISABLED", true);',
  '',
  '############',
  '# FrankenPHP Server Configuration',
  '############',
  'SERVER_NAME=:80',
  'CADDY_GLOBAL_OPTIONS=auto_https off',
  'FRANKENPHP_CONFIG=num_threads 100',
  '',
  '############',
  '# Sidekick Cache - Ultra Performance',
  '############',
  'CACHE_LOC=/var/www/html/wp-content/cache',
  'CACHE_RESPONSE_CODES=200,404,301,302',
  'BYPASS_PATH_PREFIX=/wp-admin,/wp-json,/wp-login.php,/wp-cron.php,/xmlrpc.php',
  'BYPASS_HOME=false',
  'PURGE_KEY=${cache_purge_key}',
  'PURGE_PATH=/__cache/purge',
  'TTL=3600',
  '',
  '############',
  '# MariaDB Configuration',
  '############',
  'MARIADB_ROOT_PASSWORD=${db_password}',
  'MARIADB_DATABASE=${db_name}',
  'MARIADB_USER=wordpress',
  'MARIADB_PASSWORD=${db_password}',
  '',
  '############',
  '# Container Configuration',
  '############',
  'TRAEFIK_ENABLE=false'
]

[[config.mounts]]
filePath = "/uploads.ini"
content = """# PHP Upload Configuration
upload_max_filesize = 128M
post_max_size = 128M
memory_limit = 512M
max_execution_time = 300
max_input_vars = 5000
max_input_time = 300

# OpCache Configuration
opcache.enable=1
opcache.memory_consumption=256M
opcache.max_accelerated_files=10000
opcache.revalidate_freq=2
opcache.validate_timestamps=1
opcache.save_comments=1
opcache.enable_file_override=0

# Performance Tuning
realpath_cache_size=4096K
realpath_cache_ttl=600
"""

[[config.mounts]]
filePath = "/wp-config-extra.php"
content = """<?php
// WordPress FrankenPHP Extra Configuration
// Auto-generated by Dokploy Template

// Performance optimizations
define('WP_MEMORY_LIMIT', '512M');
define('WP_MAX_MEMORY_LIMIT', '512M');

// Security hardening
define('DISALLOW_FILE_EDIT', true);
define('DISALLOW_FILE_MODS', false);
define('FORCE_SSL_ADMIN', false);

// Cache configuration
define('WP_CACHE', true);
define('WP_CACHE_KEY_SALT', '${cache_purge_key}');

// Database optimizations  
define('WP_POST_REVISIONS', 3);
define('AUTOSAVE_INTERVAL', 300);
define('WP_AUTO_UPDATE_CORE', 'minor');

// Debug (disabled in production)
define('WP_DEBUG', false);
define('WP_DEBUG_LOG', false);
define('WP_DEBUG_DISPLAY', false);
define('SCRIPT_DEBUG', false);

// Custom upload directory (optional)
// define('UPLOADS', 'wp-content/uploads');

// Multisite support (if needed)
// define('WP_ALLOW_MULTISITE', true);
"""

[[config.mounts]]  
filePath = "/healthcheck.sh"
content = """#!/bin/bash
# WordPress FrankenPHP Health Check
# Vérifie que WordPress et le cache fonctionnent

# Test 1: WordPress accessible
if ! curl -f -s "http://localhost" > /dev/null; then
    echo "❌ WordPress inaccessible"
    exit 1
fi

# Test 2: Base de données connectée
if ! curl -f -s "http://localhost/wp-admin/install.php" > /dev/null; then
    echo "❌ Base de données non accessible"  
    exit 1
fi

# Test 3: Cache actif (optionnel)
CACHE_DIR="/var/www/html/wp-content/cache"
if [ -d "$CACHE_DIR" ] && [ -w "$CACHE_DIR" ]; then
    echo "✅ Cache directory accessible"
else
    echo "⚠️  Cache directory not writable"
fi

# Test 4: FrankenPHP running
if pgrep -f "frankenphp" > /dev/null; then
    echo "✅ FrankenPHP running"
else
    echo "❌ FrankenPHP not running"
    exit 1
fi

echo "✅ WordPress FrankenPHP healthy"
exit 0
"""

[[config.mounts]]
filePath = "/cache-purge.php"
content = """<?php
/**
 * WordPress FrankenPHP Cache Purge API
 * Usage: POST /cache-purge.php?key=YOUR_PURGE_KEY&action=purge
 */

// Get purge key from environment
$valid_key = $_ENV['PURGE_KEY'] ?? '${cache_purge_key}';
$provided_key = $_GET['key'] ?? $_POST['key'] ?? '';

// Security check
if (empty($provided_key) || $provided_key !== $valid_key) {
    http_response_code(401);
    header('Content-Type: application/json');
    echo json_encode(['error' => 'Invalid or missing purge key']);
    exit;
}

$action = $_GET['action'] ?? $_POST['action'] ?? 'status';

switch ($action) {
    case 'purge':
        // Call FrankenPHP cache purge endpoint
        $purge_url = 'http://localhost/__cache/purge?key=' . urlencode($valid_key);
        $response = file_get_contents($purge_url);
        
        header('Content-Type: application/json');
        if ($response !== false) {
            echo json_encode([
                'success' => true,
                'message' => 'Cache purged successfully',
                'response' => json_decode($response, true)
            ]);
        } else {
            http_response_code(500);
            echo json_encode([
                'success' => false,
                'message' => 'Failed to purge cache'
            ]);
        }
        break;
        
    case 'status':
        // Cache status
        $cache_dir = '/var/www/html/wp-content/cache';
        $cache_files = glob($cache_dir . '/*');
        $cache_size = 0;
        
        if ($cache_files) {
            foreach ($cache_files as $file) {
                if (is_file($file)) {
                    $cache_size += filesize($file);
                }
            }
        }
        
        header('Content-Type: application/json');
        echo json_encode([
            'status' => 'active',
            'cache_files' => count($cache_files ?: []),
            'cache_size_bytes' => $cache_size,
            'cache_size_mb' => round($cache_size / 1024 / 1024, 2),
            'cache_dir' => $cache_dir,
            'purge_endpoint' => '/__cache/purge?key=' . $valid_key
        ]);
        break;
        
    default:
        http_response_code(400);
        header('Content-Type: application/json');
        echo json_encode([
            'error' => 'Invalid action', 
            'valid_actions' => ['purge', 'status']
        ]);
}
?>
"""
